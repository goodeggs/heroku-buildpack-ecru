#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

# for sourcing .profile.d files below
export HOME=$build_dir

# Ensure the .profile.d directory exists
mkdir -p $build_dir/.profile.d

# Enables the system rubygems by pointing GEM_HOME at a writeable directory
cat > $build_dir/.profile.d/ruby.sh <<-EOF
export GEM_HOME="\$HOME/vendor/ruby_gems"
export PATH="\$GEM_HOME/bin:\$PATH"
EOF

# Source it now so we can use gem!
. $build_dir/.profile.d/ruby.sh

echo "installing dpl"
gem install --no-wrappers --no-rdoc --no-ri dpl

# Rewrite dpl symlink
RELATIVE_LINK=`python -c "import os.path; print os.path.relpath('$(readlink $build_dir/vendor/ruby_gems/bin/dpl)', '$build_dir/vendor/ruby_gems/bin')"`
ln -sf $RELATIVE_LINK $build_dir/vendor/ruby_gems/bin/dpl

echo "installing Heroku Toolbelt"
mkdir -p $build_dir/vendor/heroku-toolbelt
pushd $build_dir/vendor/heroku-toolbelt
curl -s https://s3.amazonaws.com/assets.heroku.com/heroku-client/heroku-client.tgz | tar xz --strip-components=1
popd
cat > $build_dir/.profile.d/heroku-toolbelt.sh <<-EOF
export PATH="\$HOME/vendor/heroku-toolbelt/bin:\$PATH"
EOF

# Source it now so we can use heroku!
. $build_dir/.profile.d/heroku-toolbelt.sh

echo "installing heroku-exit-status plugin"
heroku plugins:install https://github.com/goodeggs/heroku-exit-status

echo "installing convox"
mkdir -p $build_dir/vendor/convox
pushd $build_dir/vendor/convox
curl -Ls https://www.convox.com/downloads/linux/convox.zip > /tmp/convox.zip
unzip /tmp/convox.zip
popd
cat > $build_dir/.profile.d/convox.sh <<-EOF
export PATH="\$HOME/vendor/convox:\$PATH"
EOF

exit 0
